{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DP203datafactorymgr"
		},
		"02_pipeline_sql_database_Linked_service_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of '02_pipeline_sql_database_Linked_service'"
		},
		"02_pipeline_staging_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of '02_pipeline_staging'"
		},
		"02_pipeline_synpase_linked_service_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of '02_pipeline_synpase_linked_service'"
		},
		"03_dataflow_jsonFile_From_ADLS_linkedService_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of '03_dataflow_jsonFile_From_ADLS_linkedService'"
		},
		"04_pipeline_linked_service_workspaceSynapse_StoredProcedure_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of '04_pipeline_linked_service_workspaceSynapse_StoredProcedure'"
		},
		"09_pipeline_Self_Hosted_ir_fileSytem_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of '09_pipeline_Self_Hosted_ir_fileSytem'"
		},
		"AdvantureWork_LS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AdvantureWork_LS'"
		},
		"AzureDataLakeStorage_LS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage_LS'"
		},
		"Copy_file_CSV_Dedicated_PoolActivityLog_synapse_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'Copy_file_CSV_Dedicated_PoolActivityLog_synapse'"
		},
		"DedicatedSql Pool copy csv from adf_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DedicatedSql Pool copy csv from adf'"
		},
		"DynamicAzureDataLakeStorage_training_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'DynamicAzureDataLakeStorage_training'"
		},
		"GenericAzureSQLdb_training_LS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'GenericAzureSQLdb_training_LS'"
		},
		"GenericAzureSqlDB_LS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'GenericAzureSqlDB_LS'"
		},
		"TestParquet_linked service_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'TestParquet_linked service'"
		},
		"02_pipeline_staging_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dp203storageaccountt.dfs.core.windows.net/"
		},
		"02_pipeline_synpase_linked_service_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "dp203training001.sql.azuresynapse.net"
		},
		"02_pipeline_synpase_linked_service_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "dp203DedicatedPool"
		},
		"02_pipeline_synpase_linked_service_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladminuser"
		},
		"03_dataflow_jsonFile_From_ADLS_linkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dp203storageaccountt.dfs.core.windows.net/"
		},
		"04_pipeline_linked_service_workspaceSynapse_StoredProcedure_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "dp203training001.sql.azuresynapse.net"
		},
		"04_pipeline_linked_service_workspaceSynapse_StoredProcedure_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "dp203DedicatedPool"
		},
		"04_pipeline_linked_service_workspaceSynapse_StoredProcedure_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladminuser"
		},
		"05_pipeline_databricks_linked_service_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0821-103528-5o629451"
		},
		"05_pipeline_databricks_orchestration_key_vault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://dp203-mykey-vault.vault.azure.net/"
		},
		"05_pipeline_databricks_orechestration_managed_identity_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0821-103528-5o629451"
		},
		"09_pipeline_Self_Hosted_ir_fileSytem_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\inetpub\\logs\\LogFiles\\W3SVC1"
		},
		"09_pipeline_Self_Hosted_ir_fileSytem_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "dp203_VM_self_Hosted"
		},
		"AdvantureWork_LS_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "dp203databaseservertraining.database.windows.net"
		},
		"AdvantureWork_LS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DP203SQLdatabase"
		},
		"AdvantureWork_LS_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "adminsql"
		},
		"AzureDataLakeStorage_LS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dp203storageaccountt.dfs.core.windows.net/"
		},
		"Copy_file_CSV_Dedicated_PoolActivityLog_synapse_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dp203storageaccountt.dfs.core.windows.net/"
		},
		"DynamicAzureDataLakeStorage_training_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dp203accountblobtraining.dfs.core.windows.net/"
		},
		"GenericAzureSQLdb_training_LS_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "@{linkedService().ServerNameTraining}"
		},
		"GenericAzureSQLdb_training_LS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().DatabaseNameTraining}"
		},
		"GenericAzureSQLdb_training_LS_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "adminsql"
		},
		"GenericAzureSqlDB_LS_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "@{linkedService().ServerName}"
		},
		"GenericAzureSqlDB_LS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().DabaseName}"
		},
		"GenericAzureSqlDB_LS_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "adminsql"
		},
		"Liked_Service_SAS_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'Liked_Service_SAS'"
		},
		"TestParquet_linked service_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dp203storageaccountt.dfs.core.windows.net/"
		},
		"FileUplodedTrigger_properties_Demon_pipeline_Storage_event_parameters_FileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"FileUplodedTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/f00081c2-4f6c-4b2b-927b-02b4f7ddd4a0/resourceGroups/POC-Databricks-E2E/providers/Microsoft.Storage/storageAccounts/dp203storageaccountt"
		},
		"TumblingWindowsTrigger_properties_pipeline_parameters_windowStart": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime"
		},
		"TumblingWindowsTrigger_properties_pipeline_parameters_windowEnd": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowEndTime"
		},
		"trigger1TumblingWindows_properties_pipeline_parameters_WindowsStart": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime\n"
		},
		"trigger1TumblingWindows_properties_pipeline_parameters_WindowsEnd": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowEndTime\n"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/01-pipeline Transfer to Pool')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Ce pipeline a pour but de copier les donn√©es de csv vers parquet puis le mettre dedicated SQL pool",
				"activities": [
					{
						"name": "Transfer csv to parquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "csv",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Correlationid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Correlationid",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Operationname",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Operationname",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Eventcategory",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Eventcategory",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Level",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Level",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Time",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "Time",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Subscription",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Subscription",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Eventinitiatedby",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Eventinitiatedby",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Resourcetype",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Resourcetype",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Resourcegroup",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Resourcegroup",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Resource",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Resource",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Transfer_csv_to_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Transfer_To_file_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy parquet to dedicated pool",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Transfer csv to parquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "parquet",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Correlationid",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Correlationid",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Operationname",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Operationname",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Eventcategory",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Eventcategory",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Level",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Level",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Time",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Subscription",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Subscription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Eventinitiatedby",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Eventinitiatedby",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Resourcetype",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Resourcetype",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Resourcegroup",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Resourcegroup",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Resource",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Resource",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TestParquet_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TestParquet_AzureSynapseAnalytics",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Transfer_csv_to_parquet')]",
				"[concat(variables('factoryId'), '/datasets/Transfer_To_file_parquet')]",
				"[concat(variables('factoryId'), '/datasets/TestParquet_dataset')]",
				"[concat(variables('factoryId'), '/datasets/TestParquet_AzureSynapseAnalytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02-pipeline copy table to dedicated pool')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy table sql to dedicated Pool",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \nhd.[SalesOrderID],hd.[OrderDate],hd.[CustomerID],hd.[SubTotal],hd.[TaxAmt],hd.[Freight],hd.[TotalDue],\ndt.[OrderQty],dt.[ProductID],dt.[UnitPrice],dt.[UnitPriceDiscount],dt.[LineTotal]\nFROM [SalesLT].[SalesOrderHeader] hd INNER JOIN [SalesLT].[SalesOrderDetail] dt\nON hd.[SalesOrderID]=dt.[SalesOrderID]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "02_pipeline_staging",
									"type": "LinkedServiceReference"
								},
								"path": "data/staging"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SalesOrderID",
											"type": "Int32"
										},
										"sink": {
											"name": "SalesOrderID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "OrderDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "OrderDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "Int32"
										},
										"sink": {
											"name": "CustomerID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "SubTotal",
											"type": "Decimal"
										},
										"sink": {
											"name": "SubTotal",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TaxAmt",
											"type": "Decimal"
										},
										"sink": {
											"name": "TaxAmt",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "Freight",
											"type": "Decimal"
										},
										"sink": {
											"name": "Freight",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TotalDue",
											"type": "Decimal"
										},
										"sink": {
											"name": "TotalDue",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "OrderQty",
											"type": "Int16"
										},
										"sink": {
											"name": "OrderQty",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ProductID",
											"type": "Int32"
										},
										"sink": {
											"name": "ProductID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "Decimal"
										},
										"sink": {
											"name": "UnitPrice",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "UnitPriceDiscount",
											"type": "Decimal"
										},
										"sink": {
											"name": "UnitPriceDiscount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "LineTotal",
											"type": "Decimal"
										},
										"sink": {
											"name": "LineTotal",
											"type": "Decimal"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "02_pipeple_data_set_sql_database",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "02_pipeline_data_set_copy_sqltable_to_synapse",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/02_pipeple_data_set_sql_database')]",
				"[concat(variables('factoryId'), '/datasets/02_pipeline_data_set_copy_sqltable_to_synapse')]",
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/03-pipeline-mapping data flow FctSales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "01-data flow factSales",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "01_dataflow_FactSales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesOrderHeaderStream": {},
									"SalesOrdersDetails": {},
									"FactSalesStream": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "02_pipeline_staging",
									"type": "LinkedServiceReference"
								},
								"folderPath": "data/staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ClearTableFactSales]"
						},
						"linkedServiceName": {
							"referenceName": "04_pipeline_linked_service_workspaceSynapse_StoredProcedure",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/01_dataflow_FactSales')]",
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_staging')]",
				"[concat(variables('factoryId'), '/linkedServices/04_pipeline_linked_service_workspaceSynapse_StoredProcedure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04_pipeline_mapping_dimTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Stored procedureClearTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "02-dataflow_dimCustomer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Product": {},
									"ProductCategory": {},
									"Customer": {},
									"MaxDimCustomer": {},
									"DimCustomers": {},
									"sinkDimProduct": {},
									"CchesinkCustomerSK": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "02_pipeline_staging",
									"type": "LinkedServiceReference"
								},
								"folderPath": "data/staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Stored procedureClearTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ClearTable]"
						},
						"linkedServiceName": {
							"referenceName": "04_pipeline_linked_service_workspaceSynapse_StoredProcedure",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/02-dataflow_dimCustomer')]",
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_staging')]",
				"[concat(variables('factoryId'), '/linkedServices/04_pipeline_linked_service_workspaceSynapse_StoredProcedure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/05_pipeline_orchestration')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "execute our sample notebook",
						"type": "DatabricksNotebook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/mohamed.grini@aosis.net/orchestrationSample"
						},
						"linkedServiceName": {
							"referenceName": "05_pipeline_databricks_linked_service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "notebook using managed identity",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/mohamed.grini@aosis.net/orchestrationSample"
						},
						"linkedServiceName": {
							"referenceName": "05_pipeline_databricks_orechestration_managed_identity",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/05_pipeline_databricks_linked_service')]",
				"[concat(variables('factoryId'), '/linkedServices/05_pipeline_databricks_orechestration_managed_identity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/06-pipeline_orchestration_using_managed_identity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "managed identity using job cluster without interacting",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/mohamed.grini@aosis.net/orchestrationSample",
							"baseParameters": {
								"mytest": "Hello world from ADF!"
							}
						},
						"linkedServiceName": {
							"referenceName": "06_pipeline_job_cluster_linked_service",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/06_pipeline_job_cluster_linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/07-pipeline_copyCSVtoJson_in_datalake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "03_dataflow_jsonFile",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceJsonFile": {},
									"sinkFileJson": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy json to dedicated Pool",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "json",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "02_pipeline_staging",
									"type": "LinkedServiceReference"
								},
								"path": "data/staging"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['Correlationid']"
										},
										"sink": {
											"name": "Correlationid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Operationname']"
										},
										"sink": {
											"name": "Operationname",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Status']"
										},
										"sink": {
											"name": "Status",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Eventcategory']"
										},
										"sink": {
											"name": "Eventcategory",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Level']"
										},
										"sink": {
											"name": "Level",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Time']"
										},
										"sink": {
											"name": "Time",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['Subscription']"
										},
										"sink": {
											"name": "Subscription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Eventinitiatedby']"
										},
										"sink": {
											"name": "Eventinitiatedby",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resourcetype']"
										},
										"sink": {
											"name": "Resourcetype",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resourcegroup']"
										},
										"sink": {
											"name": "Resourcegroup",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resource']"
										},
										"sink": {
											"name": "Resource",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "03_dataflow_jsonFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "07_pipeline_json_to_dedicatedpool_ActivityPool",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DeleteJsonFileindatalake",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy json to dedicated Pool",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "03_dataflow_jsonFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "02_pipeline_staging",
									"type": "LinkedServiceReference"
								},
								"path": "data/LoggingforDetelteActivity"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.json",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/03_dataflow_jsonFile')]",
				"[concat(variables('factoryId'), '/datasets/03_dataflow_jsonFile')]",
				"[concat(variables('factoryId'), '/datasets/07_pipeline_json_to_dedicatedpool_ActivityPool')]",
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/08-pipeline_customerCourseJsonArray')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "jsonArrayCustomer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "04-dataflow_jsonWithArrayColumn",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCustomeJson": {},
									"sinkCustomerDedicatedPool": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "02_pipeline_staging",
									"type": "LinkedServiceReference"
								},
								"folderPath": "data/staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/04-dataflow_jsonWithArrayColumn')]",
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/08-pipeline_jsonColumnObject')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "JsonColumnObject",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "05_dataflow_JsonWithColumnObject",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceJsonObject": {},
									"sinkJsonObject": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "02_pipeline_staging",
									"type": "LinkedServiceReference"
								},
								"folderPath": "data/staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/05_dataflow_JsonWithColumnObject')]",
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/09-pipeline_copy_csvfiles_to_adls_SelfHostedIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy csv to ADSL self hosted IR",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*.*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "09_pipeline_fileSytemCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "09_pipeline_SelfHostedIR",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/09_pipeline_fileSytemCSV')]",
				"[concat(variables('factoryId'), '/datasets/09_pipeline_SelfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/10-pipeline_WebLog_in_Synapse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebLog",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "06_dataflow_WebLogs_fromVM",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceWebinADLS": {},
									"WeblogStorageInSynapse": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "02_pipeline_staging",
									"type": "LinkedServiceReference"
								},
								"folderPath": "data/staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/06_dataflow_WebLogs_fromVM')]",
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEMO pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CustomerSQL_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Customer_csv_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-31T12:29:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerSQL_DS')]",
				"[concat(variables('factoryId'), '/datasets/Customer_csv_DS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Demo_pipeline_trigger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"windowStart": {
						"type": "string"
					},
					"windowEnd": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-07T10:03:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Demo_pipeline_trigger_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-07T09:12:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Demon_pipeline_Storage_event')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-07T10:36:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get a list of table to be prcessed",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select quotename(t.name) as tableName,quotename(schema_name(t.schema_id)) as schemaName\nfrom sys.tables as t",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Generic_azure_dataset",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DabaseName": {
										"value": "@pipeline().parameters.DabaseName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "iterate all tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get a list of table to be prcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get a list of table to be prcessed').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "copy data from table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select * from ',item().schemaName, '.',item().tableName)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Generic_azure_dataset",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.ServerName",
													"type": "Expression"
												},
												"DabaseName": {
													"value": "@pipeline().parameters.DabaseName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Generic_ADLSg2CSV_DS",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.ServerName",
													"type": "Expression"
												},
												"DabaseName": {
													"value": "@pipeline().parameters.DabaseName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().schemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().tableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "dp203databaseservertraining.database.windows.net"
					},
					"DabaseName": {
						"type": "string",
						"defaultValue": "DP203SQLdatabase"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-31T15:03:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Generic_azure_dataset')]",
				"[concat(variables('factoryId'), '/datasets/Generic_ADLSg2CSV_DS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/child')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "var",
							"value": "test"
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "var",
							"value": 2
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod2-07.francecentral.logic.azure.com:443/workflows/daa9488f804b42ad950345b0418a5f8f/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=ubJpW_5Xh0AM2QZIWtSiYkduV_QSJC_7B3B7VqicfwM",
							"body": {
								"value": "{\n    \"message\" : \"This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().Pipeline}\", \n    \"receiver\" : \"@{pipeline().parameters.receiver}\"\n   }",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "mohammedgrini1@gmail.com"
					}
				},
				"variables": {
					"var": {
						"type": "Integer"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-05T14:33:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "child",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-05T14:33:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/child')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_demo_review')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"WindowsStart": {
						"type": "string",
						"defaultValue": "@trigger().outputs.windowStartTime"
					},
					"WindowsEnd": {
						"type": "string",
						"defaultValue": "@trigger().outputs.windowEndTime"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-09T13:02:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_showing_ci_cd_behaviour')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"description": "Added to feature 1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Wait2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Wait2",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_dataflow_SalesOrdersDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "02_pipeline_sql_database_Linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderDetailID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderQty",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LineTotal",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "SalesOrderDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_sql_database_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_dataflow_tableSQL_SalesOederHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "02_pipeline_sql_database_Linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RevisionNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ShipDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OnlineOrderFlag",
						"type": "bit"
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipToAddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToAddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "varchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Comment",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "SalesOrderHeader"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_sql_database_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02_dataflow_Customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "02_pipeline_sql_database_Linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ThumbNailPhoto",
						"type": "varbinary"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_sql_database_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02_dataflow_DimCustomers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "02_pipeline_sql_database_Linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "SalesPerson",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "PasswordHash",
						"type": "varchar"
					},
					{
						"name": "PasswordSalt",
						"type": "varchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_sql_database_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02_dataflow_DimProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DedicatedSql Pool copy csv from adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ProductSK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductNumber",
						"type": "varchar"
					},
					{
						"name": "Color",
						"type": "varchar"
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductCategoryName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DedicatedSql Pool copy csv from adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02_dataflow_ProductCategory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "02_pipeline_sql_database_Linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ParentProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "ProductCategory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_sql_database_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02_dataflow_dimCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DedicatedSql Pool copy csv from adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "CustomerSK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CompanyName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DedicatedSql Pool copy csv from adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02_pipeline_data_set_copy_sqltable_to_synapse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "02_pipeline_synpase_linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "OrderQty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LineTotal",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "factSales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_synpase_linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02_pipeple_data_set_sql_database')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "02_pipeline_sql_database_Linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_sql_database_Linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/03_dataflow_jsonFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "03_dataflow_jsonFile_From_ADLS_linkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "json",
						"fileSystem": "data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Correlationid": {
							"type": "string"
						},
						"Operationname": {
							"type": "string"
						},
						"Status": {
							"type": "string"
						},
						"Eventcategory": {
							"type": "string"
						},
						"Level": {
							"type": "string"
						},
						"Time": {
							"type": "string"
						},
						"Subscription": {
							"type": "string"
						},
						"Eventinitiatedby": {
							"type": "string"
						},
						"Resourcetype": {
							"type": "string"
						},
						"Resourcegroup": {
							"type": "string"
						},
						"Resource": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/03_dataflow_jsonFile_From_ADLS_linkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04_dataflow_Json_To_CustomerCourse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DedicatedSql Pool copy csv from adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerName",
						"type": "varchar"
					},
					{
						"name": "Registered",
						"type": "bit"
					},
					{
						"name": "Courses",
						"type": "varchar"
					},
					{
						"name": "Mobile",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomercourseObject"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DedicatedSql Pool copy csv from adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04dataflow_JsonCutomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer.json",
						"folderPath": "customer",
						"fileSystem": "data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"customerid": {
							"type": "integer"
						},
						"customername": {
							"type": "string"
						},
						"registered": {
							"type": "boolean"
						},
						"courses": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/05_dataflowJsonColumnObject')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DedicatedSql Pool copy csv from adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerName",
						"type": "varchar"
					},
					{
						"name": "Registered",
						"type": "bit"
					},
					{
						"name": "Courses",
						"type": "varchar"
					},
					{
						"name": "Mobile",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomercourseObject"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DedicatedSql Pool copy csv from adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/05_dataflow_JsonObject')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "02_pipeline_staging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer.json",
						"folderPath": "CustomerObject",
						"fileSystem": "data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"customerid": {
							"type": "integer"
						},
						"customername": {
							"type": "string"
						},
						"registered": {
							"type": "boolean"
						},
						"courses": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"details": {
							"type": "object",
							"properties": {
								"mobile": {
									"type": "string"
								},
								"city": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/06_dataflow_AzureSynapse_Analytics_WebLogs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DedicatedSql Pool copy csv from adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "LogDate",
						"type": "date"
					},
					{
						"name": "IPAddress",
						"type": "varchar"
					},
					{
						"name": "RequestMethod",
						"type": "varchar"
					},
					{
						"name": "RequestResource",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "WebLogs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DedicatedSql Pool copy csv from adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/06_dataflow_WebLog')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "03_dataflow_jsonFile_From_ADLS_linkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "u_ex240830.log",
						"folderPath": "weblog",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "#Software: Microsoft Internet Information Services 10.0",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/03_dataflow_jsonFile_From_ADLS_linkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/07_dataflow_SplitCondition')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DedicatedSql Pool copy csv from adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "PoolActivityLog"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DedicatedSql Pool copy csv from adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/07_dataflow_SplitConditionPoolActivity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "02_pipeline_staging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ActivityLog01.csv",
						"folderPath": "csv",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Correlationid",
						"type": "String"
					},
					{
						"name": "Operationname",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Eventcategory",
						"type": "String"
					},
					{
						"name": "Level",
						"type": "String"
					},
					{
						"name": "Time",
						"type": "String"
					},
					{
						"name": "Subscription",
						"type": "String"
					},
					{
						"name": "Eventinitiatedby",
						"type": "String"
					},
					{
						"name": "Resourcetype",
						"type": "String"
					},
					{
						"name": "Resourcegroup",
						"type": "String"
					},
					{
						"name": "Resource",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/07_pipeline_json_to_dedicatedpool_ActivityPool')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "02_pipeline_synpase_linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "PoolActivityLog"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/02_pipeline_synpase_linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/09_pipeline_SelfHostedIR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "weblog",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Correlationid",
						"type": "String"
					},
					{
						"name": "Operationname",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Eventcategory",
						"type": "String"
					},
					{
						"name": "Level",
						"type": "String"
					},
					{
						"name": "Time",
						"type": "String"
					},
					{
						"name": "Subscription",
						"type": "String"
					},
					{
						"name": "Eventinitiatedby",
						"type": "String"
					},
					{
						"name": "Resourcetype",
						"type": "String"
					},
					{
						"name": "Resourcegroup",
						"type": "String"
					},
					{
						"name": "Resource",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/09_pipeline_fileSytemCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "09_pipeline_Self_Hosted_ir_fileSytem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/09_pipeline_Self_Hosted_ir_fileSytem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerSQL_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdvantureWork_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "SalesPerson",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "PasswordHash",
						"type": "varchar"
					},
					{
						"name": "PasswordSalt",
						"type": "varchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AdvantureWork_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer_csv_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer.csv",
						"folderPath": "sqlservertables/AdeventureWorks/Customers/Year=2023/Month=10/Day=20",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "NameStyle",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "MiddleName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Suffix",
						"type": "String"
					},
					{
						"name": "CompanyName",
						"type": "String"
					},
					{
						"name": "SalesPerson",
						"type": "String"
					},
					{
						"name": "EmailAddress",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "PasswordHash",
						"type": "String"
					},
					{
						"name": "PasswordSalt",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "String"
					},
					{
						"name": "ModifiedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_o30')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Copy_file_CSV_Dedicated_PoolActivityLog_synapse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "parquet",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Copy_file_CSV_Dedicated_PoolActivityLog_synapse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Generic_ADLSg2CSV_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().SchemaName, '_',dataset().tableName, '.csv')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(\n    dataset().ServerName,\n    '/',\n    dataset().DabaseName,\n    '/',\n    dataset().TableName,\n    '/Year=',\n    formatDateTime(utcnow(),'yyyy'),\n    '/Month=',\n    formatDateTime(utcnow(),'MM'),\n    '/Day=',\n    formatDateTime(utcnow(),'dd')\n)\n\n\n",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Generic_azure_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericAzureSqlDB_LS",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DabaseName": {
							"value": "@dataset().DabaseName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DabaseName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDB_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_to_dedicated_Pool')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Copy_file_CSV_Dedicated_PoolActivityLog_synapse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "parquet",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Copy_file_CSV_Dedicated_PoolActivityLog_synapse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_o30')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Copy_file_CSV_Dedicated_PoolActivityLog_synapse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ActivityLog01.csv",
						"folderPath": "csv",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Correlationid",
						"type": "String"
					},
					{
						"name": "Operationname",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Eventcategory",
						"type": "String"
					},
					{
						"name": "Level",
						"type": "String"
					},
					{
						"name": "Time",
						"type": "String"
					},
					{
						"name": "Subscription",
						"type": "String"
					},
					{
						"name": "Eventinitiatedby",
						"type": "String"
					},
					{
						"name": "Resourcetype",
						"type": "String"
					},
					{
						"name": "Resourcegroup",
						"type": "String"
					},
					{
						"name": "Resource",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Copy_file_CSV_Dedicated_PoolActivityLog_synapse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestParquet_AzureSynapseAnalytics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DedicatedSql Pool copy csv from adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Correlationid",
						"type": "varchar"
					},
					{
						"name": "Operationname",
						"type": "varchar"
					},
					{
						"name": "Status",
						"type": "varchar"
					},
					{
						"name": "Eventcategory",
						"type": "varchar"
					},
					{
						"name": "Level",
						"type": "varchar"
					},
					{
						"name": "Time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Subscription",
						"type": "varchar"
					},
					{
						"name": "Eventinitiatedby",
						"type": "varchar"
					},
					{
						"name": "Resourcetype",
						"type": "varchar"
					},
					{
						"name": "Resourcegroup",
						"type": "varchar"
					},
					{
						"name": "Resource",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PoolActivityLog"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DedicatedSql Pool copy csv from adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestParquet_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TestParquet_linked service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "parquet",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Correlationid",
						"type": "UTF8"
					},
					{
						"name": "Operationname",
						"type": "UTF8"
					},
					{
						"name": "Status",
						"type": "UTF8"
					},
					{
						"name": "Eventcategory",
						"type": "UTF8"
					},
					{
						"name": "Level",
						"type": "UTF8"
					},
					{
						"name": "Time",
						"type": "INT96"
					},
					{
						"name": "Subscription",
						"type": "UTF8"
					},
					{
						"name": "Eventinitiatedby",
						"type": "UTF8"
					},
					{
						"name": "Resourcetype",
						"type": "UTF8"
					},
					{
						"name": "Resourcegroup",
						"type": "UTF8"
					},
					{
						"name": "Resource",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/TestParquet_linked service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Transfer_To_file_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Copy_file_CSV_Dedicated_PoolActivityLog_synapse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "parquet",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Copy_file_CSV_Dedicated_PoolActivityLog_synapse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Transfer_csv_to_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Copy_file_CSV_Dedicated_PoolActivityLog_synapse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "parquet",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Correlationid",
						"type": "String"
					},
					{
						"name": "Operationname",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Eventcategory",
						"type": "String"
					},
					{
						"name": "Level",
						"type": "String"
					},
					{
						"name": "Time",
						"type": "String"
					},
					{
						"name": "Subscription",
						"type": "String"
					},
					{
						"name": "Eventinitiatedby",
						"type": "String"
					},
					{
						"name": "Resourcetype",
						"type": "String"
					},
					{
						"name": "Resourcegroup",
						"type": "String"
					},
					{
						"name": "Resource",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Copy_file_CSV_Dedicated_PoolActivityLog_synapse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_parquet_to_dedicated_SQL_Pool')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DedicatedSql Pool copy csv from adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "OrderQty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LineTotal",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "factSales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DedicatedSql Pool copy csv from adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02_pipeline_sql_database_Linked_service')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('02_pipeline_sql_database_Linked_service_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/02_pipeline_staging')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('02_pipeline_staging_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('02_pipeline_staging_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/02_pipeline_synpase_linked_service')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('02_pipeline_synpase_linked_service_properties_typeProperties_server')]",
					"database": "[parameters('02_pipeline_synpase_linked_service_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('02_pipeline_synpase_linked_service_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('02_pipeline_synpase_linked_service_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/03_dataflow_jsonFile_From_ADLS_linkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('03_dataflow_jsonFile_From_ADLS_linkedService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('03_dataflow_jsonFile_From_ADLS_linkedService_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/04_pipeline_linked_service_workspaceSynapse_StoredProcedure')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('04_pipeline_linked_service_workspaceSynapse_StoredProcedure_properties_typeProperties_server')]",
					"database": "[parameters('04_pipeline_linked_service_workspaceSynapse_StoredProcedure_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('04_pipeline_linked_service_workspaceSynapse_StoredProcedure_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('04_pipeline_linked_service_workspaceSynapse_StoredProcedure_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/05_pipeline_databricks_linked_service')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-7020639691561392.12.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "05_pipeline_databricks_orchestration_key_vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "dp203-personnalAcessTokenDatabricks"
					},
					"existingClusterId": "[parameters('05_pipeline_databricks_linked_service_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/05_pipeline_databricks_orchestration_key_vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/05_pipeline_databricks_orchestration_key_vault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('05_pipeline_databricks_orchestration_key_vault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/05_pipeline_databricks_orechestration_managed_identity')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-7020639691561392.12.azuredatabricks.net",
					"authentication": "MSI",
					"workspaceResourceId": "/subscriptions/f00081c2-4f6c-4b2b-927b-02b4f7ddd4a0/resourceGroups/POC-Databricks-E2E/providers/Microsoft.Databricks/workspaces/databricksPremium",
					"existingClusterId": "[parameters('05_pipeline_databricks_orechestration_managed_identity_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/06_pipeline_job_cluster_linked_service')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-7020639691561392.12.azuredatabricks.net",
					"authentication": "MSI",
					"workspaceResourceId": "/subscriptions/f00081c2-4f6c-4b2b-927b-02b4f7ddd4a0/resourceGroups/POC-Databricks-E2E/providers/Microsoft.Databricks/workspaces/databricksPremium",
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1",
					"newClusterVersion": "10.4.x-scala2.12",
					"clusterOption": "Fixed",
					"newClusterInitScripts": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/09_pipeline_Self_Hosted_ir_fileSytem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('09_pipeline_Self_Hosted_ir_fileSytem_properties_typeProperties_host')]",
					"userId": "[parameters('09_pipeline_Self_Hosted_ir_fileSytem_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('09_pipeline_Self_Hosted_ir_fileSytem_password')]"
					}
				},
				"connectVia": {
					"referenceName": "Self-Hosted-IntegrationRutime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Self-Hosted-IntegrationRutime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdvantureWork_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AdvantureWork_LS_properties_typeProperties_server')]",
					"database": "[parameters('AdvantureWork_LS_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AdvantureWork_LS_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AdvantureWork_LS_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_LS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_LS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_file_CSV_Dedicated_PoolActivityLog_synapse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Copy_file_CSV_Dedicated_PoolActivityLog_synapse_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('Copy_file_CSV_Dedicated_PoolActivityLog_synapse_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DedicatedSql Pool copy csv from adf')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('DedicatedSql Pool copy csv from adf_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicAzureDataLakeStorage_training')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"DatabaseNameTraining": {
						"type": "string"
					},
					"ServerNameTraining": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DynamicAzureDataLakeStorage_training_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('DynamicAzureDataLakeStorage_training_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericAzureSQLdb_training_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "the aims of this link service is to demonstrate how to create paramaters in pipepline using ADF.",
				"parameters": {
					"ServerNameTraining": {
						"type": "string"
					},
					"DatabaseNameTraining": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('GenericAzureSQLdb_training_LS_properties_typeProperties_server')]",
					"database": "[parameters('GenericAzureSQLdb_training_LS_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('GenericAzureSQLdb_training_LS_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('GenericAzureSQLdb_training_LS_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericAzureSqlDB_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DabaseName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('GenericAzureSqlDB_LS_properties_typeProperties_server')]",
					"database": "[parameters('GenericAzureSqlDB_LS_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('GenericAzureSqlDB_LS_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('GenericAzureSqlDB_LS_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Liked_Service_SAS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"sasUri": "[parameters('Liked_Service_SAS_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestParquet_linked service')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('TestParquet_linked service_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('TestParquet_linked service_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileUplodedTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Demon_pipeline_Storage_event",
							"type": "PipelineReference"
						},
						"parameters": {
							"FileName": "[parameters('FileUplodedTrigger_properties_Demon_pipeline_Storage_event_parameters_FileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/raw/blobs/",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('FileUplodedTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Demon_pipeline_Storage_event')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ScheduleTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Demo_pipeline_trigger",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "Demo_pipeline_trigger_2",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-08-07T08:51:00",
						"timeZone": "W. Europe Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Demo_pipeline_trigger')]",
				"[concat(variables('factoryId'), '/pipelines/Demo_pipeline_trigger_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ScheduleTriggerEveryMounth')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Demo_pipeline_trigger",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2024-08-07T09:16:00",
						"timeZone": "W. Europe Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								4
							],
							"monthDays": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Demo_pipeline_trigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TumblingWindowsTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Demo_pipeline_trigger",
						"type": "PipelineReference"
					},
					"parameters": {
						"windowStart": "[parameters('TumblingWindowsTrigger_properties_pipeline_parameters_windowStart')]",
						"windowEnd": "[parameters('TumblingWindowsTrigger_properties_pipeline_parameters_windowEnd')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2024-08-07T09:54:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Demo_pipeline_trigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1TumblingWindows')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pipeline_demo_review",
						"type": "PipelineReference"
					},
					"parameters": {
						"WindowsStart": "[parameters('trigger1TumblingWindows_properties_pipeline_parameters_WindowsStart')]",
						"WindowsEnd": "[parameters('trigger1TumblingWindows_properties_pipeline_parameters_WindowsEnd')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2024-08-09T12:57:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline_demo_review')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Self-Hosted-IntegrationRutime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_dataflow_FactSales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "01_dataflow_tableSQL_SalesOederHeader",
								"type": "DatasetReference"
							},
							"name": "SalesOrderHeaderStream"
						},
						{
							"dataset": {
								"referenceName": "01_dataflow_SalesOrdersDetails",
								"type": "DatasetReference"
							},
							"name": "SalesOrdersDetails"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "copy_parquet_to_dedicated_SQL_Pool",
								"type": "DatasetReference"
							},
							"name": "FactSalesStream"
						}
					],
					"transformations": [
						{
							"name": "SalesOrderHeaderJoinSalesOrderDetails"
						},
						{
							"name": "selectColumn"
						},
						{
							"name": "derivedColumnTotalDue"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SalesOrderHeaderStream",
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SalesOrdersDetails",
						"SalesOrderHeaderStream, SalesOrdersDetails join(SalesOrderHeaderStream@SalesOrderID == SalesOrderDetailID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SalesOrderHeaderJoinSalesOrderDetails",
						"SalesOrderHeaderJoinSalesOrderDetails select(mapColumn(",
						"          SalesOrderID = SalesOrderHeaderStream@SalesOrderID,",
						"          OrderDate,",
						"          CustomerID,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          SalesOrderID = SalesOrdersDetails@SalesOrderID,",
						"          OrderQty,",
						"          ProductID,",
						"          UnitPrice,",
						"          UnitPriceDiscount,",
						"          LineTotal",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumn",
						"selectColumn derive(TotalDue = add(add(SubTotal,TaxAmt),Freight)) ~> derivedColumnTotalDue",
						"derivedColumnTotalDue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          OrderDate as timestamp,",
						"          CustomerID as integer,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(18,0)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          CustomerID,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          OrderQty,",
						"          ProductID,",
						"          UnitPrice,",
						"          UnitPriceDiscount,",
						"          LineTotal",
						"     )) ~> FactSalesStream"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/01_dataflow_tableSQL_SalesOederHeader')]",
				"[concat(variables('factoryId'), '/datasets/01_dataflow_SalesOrdersDetails')]",
				"[concat(variables('factoryId'), '/datasets/copy_parquet_to_dedicated_SQL_Pool')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02-dataflow_dimCustomer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "02_dataflow_Customer",
								"type": "DatasetReference"
							},
							"name": "Product"
						},
						{
							"dataset": {
								"referenceName": "02_dataflow_ProductCategory",
								"type": "DatasetReference"
							},
							"name": "ProductCategory"
						},
						{
							"dataset": {
								"referenceName": "02_dataflow_DimCustomers",
								"type": "DatasetReference"
							},
							"name": "Customer"
						},
						{
							"dataset": {
								"referenceName": "02_dataflow_dimCustomer",
								"type": "DatasetReference"
							},
							"name": "MaxDimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "02_dataflow_dimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomers"
						},
						{
							"dataset": {
								"referenceName": "02_dataflow_DimProduct",
								"type": "DatasetReference"
							},
							"name": "sinkDimProduct"
						},
						{
							"name": "CchesinkCustomerSK"
						}
					],
					"transformations": [
						{
							"name": "ProductJoinProductCategory"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "selectColumnsCustomers"
						},
						{
							"name": "filterNotNullValueColor"
						},
						{
							"name": "surrogateKeyProductStream"
						},
						{
							"name": "surrogateKeyDimCustomer"
						},
						{
							"name": "derivedColumnCustomerSK"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Product",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductCategory",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT * FROM [SalesLT].[Customer]\\nWHERE CustomerID<=4000',",
						"     format: 'query') ~> Customer",
						"source(output(",
						"          MaxCustomerSK as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT  MAX(CustomerSK) AS \\'MaxCustomerSK\\'\\n FROM [dbo].[dimCustomer]',",
						"     format: 'query',",
						"     staged: true) ~> MaxDimCustomer",
						"Product, ProductCategory join(Product@ProductCategoryID == ProductCategory@ProductCategoryID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductJoinProductCategory",
						"ProductJoinProductCategory select(mapColumn(",
						"          ProductID,",
						"          ProductNumber,",
						"          Color,",
						"          ProductCategoryID = Product@ProductCategoryID,",
						"          ProductCategoryName = Product@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"Customer select(mapColumn(",
						"          CustomerID,",
						"          CompanyName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumnsCustomers",
						"SelectColumns filter(!isNull(Color)) ~> filterNotNullValueColor",
						"filterNotNullValueColor keyGenerate(output(ProductSerrugateKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyProductStream",
						"selectColumnsCustomers keyGenerate(output(CustomerSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyDimCustomer",
						"surrogateKeyDimCustomer derive(CustomerSK = add(CustomerSK,CchesinkCustomerSK#outputs()[1].MaxCustomerSK)) ~> derivedColumnCustomerSK",
						"derivedColumnCustomerSK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerSK as integer,",
						"          CustomerID as integer,",
						"          CompanyName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          CompanyName,",
						"          CustomerSK",
						"     )) ~> DimCustomers",
						"surrogateKeyProductStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductSK as integer,",
						"          ProductID as integer,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          ProductCategoryID as integer,",
						"          ProductCategoryName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          ProductNumber,",
						"          Color,",
						"          ProductCategoryID,",
						"          ProductCategoryName,",
						"          ProductSK = ProductSerrugateKey",
						"     )) ~> sinkDimProduct",
						"MaxDimCustomer sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> CchesinkCustomerSK"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/02_dataflow_Customer')]",
				"[concat(variables('factoryId'), '/datasets/02_dataflow_ProductCategory')]",
				"[concat(variables('factoryId'), '/datasets/02_dataflow_DimCustomers')]",
				"[concat(variables('factoryId'), '/datasets/02_dataflow_dimCustomer')]",
				"[concat(variables('factoryId'), '/datasets/02_dataflow_DimProduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/03_dataflow_jsonFile')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SourceDataset_o30",
								"type": "DatasetReference"
							},
							"name": "SourceJsonFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "03_dataflow_jsonFile",
								"type": "DatasetReference"
							},
							"name": "sinkFileJson"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as string,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceJsonFile",
						"SourceJsonFile sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as string,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Correlationid,",
						"          Operationname,",
						"          Status,",
						"          Eventcategory,",
						"          Level,",
						"          Time,",
						"          Subscription,",
						"          Eventinitiatedby,",
						"          Resourcetype,",
						"          Resourcegroup,",
						"          Resource",
						"     )) ~> sinkFileJson"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_o30')]",
				"[concat(variables('factoryId'), '/datasets/03_dataflow_jsonFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-dataflow_jsonWithArrayColumn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "04dataflow_JsonCutomer",
								"type": "DatasetReference"
							},
							"name": "sourceCustomeJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "04_dataflow_Json_To_CustomerCourse",
								"type": "DatasetReference"
							},
							"name": "sinkCustomerDedicatedPool"
						}
					],
					"transformations": [
						{
							"name": "flattenCustomerJsonArrays"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customerid as integer,",
						"          customername as string,",
						"          registered as boolean,",
						"          courses as string[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> sourceCustomeJson",
						"sourceCustomeJson foldDown(unroll(courses, courses),",
						"     mapColumn(",
						"          customerid,",
						"          customername,",
						"          registered,",
						"          courses",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenCustomerJsonArrays",
						"flattenCustomerJsonArrays sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          Registered as boolean,",
						"          Courses as string,",
						"          Mobile as string,",
						"          City as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID = customerid,",
						"          CustomerName = customername,",
						"          Registered = registered,",
						"          Courses = courses",
						"     )) ~> sinkCustomerDedicatedPool"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/04dataflow_JsonCutomer')]",
				"[concat(variables('factoryId'), '/datasets/04_dataflow_Json_To_CustomerCourse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/05_dataflow_JsonWithColumnObject')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "05_dataflow_JsonObject",
								"type": "DatasetReference"
							},
							"name": "SourceJsonObject"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "05_dataflowJsonColumnObject",
								"type": "DatasetReference"
							},
							"name": "sinkJsonObject"
						}
					],
					"transformations": [
						{
							"name": "flattenJsonObject"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customerid as integer,",
						"          customername as string,",
						"          registered as boolean,",
						"          courses as string[],",
						"          details as (mobile as string, city as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> SourceJsonObject",
						"SourceJsonObject foldDown(unroll(courses, courses),",
						"     mapColumn(",
						"          customerid,",
						"          customername,",
						"          registered,",
						"          courses,",
						"          details",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenJsonObject",
						"flattenJsonObject sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          Registered as boolean,",
						"          Courses as string,",
						"          Mobile as string,",
						"          City as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID = customerid,",
						"          CustomerName = customername,",
						"          Registered = registered,",
						"          Courses = courses,",
						"          Mobile = details.mobile,",
						"          City = details.city",
						"     )) ~> sinkJsonObject"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/05_dataflow_JsonObject')]",
				"[concat(variables('factoryId'), '/datasets/05_dataflowJsonColumnObject')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/06_dataflow_WebLogs_fromVM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "06_dataflow_WebLog",
								"type": "DatasetReference"
							},
							"name": "sourceWebinADLS"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "06_dataflow_AzureSynapse_Analytics_WebLogs",
								"type": "DatasetReference"
							},
							"name": "WeblogStorageInSynapse"
						}
					],
					"transformations": [
						{
							"name": "SplitWebLogbySpace"
						},
						{
							"name": "PickupColumnStructure"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {2024-08-30 08:57:30 10.0.0.4 GET / - 80 - 185.224.128.84 - - 200 0 0 280} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     skipLines: 4) ~> sourceWebinADLS",
						"sourceWebinADLS derive(WebLog = split({2024-08-30 08:57:30 10.0.0.4 GET / - 80 - 185.224.128.84 - - 200 0 0 280},\" \")) ~> SplitWebLogbySpace",
						"SplitWebLogbySpace derive(LogDate = WebLog[1],",
						"          IPAddress = WebLog[9],",
						"          RequestMethod = WebLog[4],",
						"          RequestResource = WebLog[10]) ~> PickupColumnStructure",
						"PickupColumnStructure sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LogDate as date,",
						"          IPAddress as string,",
						"          RequestMethod as string,",
						"          RequestResource as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          LogDate,",
						"          IPAddress,",
						"          RequestMethod,",
						"          RequestResource",
						"     )) ~> WeblogStorageInSynapse"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/06_dataflow_WebLog')]",
				"[concat(variables('factoryId'), '/datasets/06_dataflow_AzureSynapse_Analytics_WebLogs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/07_dataflow_splitCondition')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "07_dataflow_SplitConditionPoolActivity",
								"type": "DatasetReference"
							},
							"name": "source01ActivityPool"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "07_dataflow_SplitCondition",
								"type": "DatasetReference"
							},
							"name": "sinkActivityPoolSynapse"
						}
					],
					"transformations": [
						{
							"name": "splitResourceGroup"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as date,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source01ActivityPool",
						"source01ActivityPool split(Resourcegroup=='app-grp',",
						"     disjoint: false) ~> splitResourceGroup@(StreamResourceGroup, StreamWithoutCondition)",
						"splitResourceGroup@StreamResourceGroup sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Correlationid,",
						"          Operationname,",
						"          Status,",
						"          Eventcategory,",
						"          Level,",
						"          Time,",
						"          Subscription,",
						"          Eventinitiatedby,",
						"          Resourcetype,",
						"          Resourcegroup,",
						"          Resource",
						"     )) ~> sinkActivityPoolSynapse"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/07_dataflow_SplitConditionPoolActivity')]",
				"[concat(variables('factoryId'), '/datasets/07_dataflow_SplitCondition')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		}
	]
}